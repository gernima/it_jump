import telebot
from telebot import types
import DIARY
import pickle
import test


print('start')
bot = telebot.TeleBot('1016001810:AAGPWnpJYQFGMnjxRSfROW8ALMxBygo0I7Q')
message_lesson_id = []
message_food_id = list()
stop = True
FOOD = {}
food_who_id = set()
people = 0
message_lesson = []
stolovka_all = '‚ùå'
stolovka_food = '‚ùå'
stolovka_who = '‚ùå'
lessons = open('lessons', 'rb')
LESSONS = pickle.load(lessons)
lessons.close()
m = types.InlineKeyboardMarkup(row_width=3)
item_1 = types.InlineKeyboardButton(text='üóΩ–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', callback_data='0')
item_2 = types.InlineKeyboardButton(text='üåå–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è', callback_data='1')
item_3 = types.InlineKeyboardButton(text='ü¶†–ë–∏–æ–ª–æ–≥–∏—è', callback_data='2')
item_4 = types.InlineKeyboardButton(text='üåç–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', callback_data='3')
item_5 = types.InlineKeyboardButton(text='üñ•–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', callback_data='4')
item_6 = types.InlineKeyboardButton(text='üèõ–ò—Å—Ç–æ—Ä–∏—è', callback_data='5')
item_7 = types.InlineKeyboardButton(text='üìñ–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', callback_data='6')
item_8 = types.InlineKeyboardButton(text='üìà–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', callback_data='7')
item_9 = types.InlineKeyboardButton(text='üí¨–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ', callback_data='8')
item_10 = types.InlineKeyboardButton(text='‚õë–û–ë–ñ', callback_data='9')
item_11 = types.InlineKeyboardButton(text='üé≠–†–æ–¥–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', callback_data='10')
item_12 = types.InlineKeyboardButton(text='üéÆ–†–æ–¥–Ω–æ–π —è–∑—ã–∫', callback_data='11')
item_13 = types.InlineKeyboardButton(text='üìù–†—É—Å—Å–∫–∏–π —è–∑—ã–∫', callback_data='12')
item_14 = types.InlineKeyboardButton(text='üõ†–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è', callback_data='13')
item_15 = types.InlineKeyboardButton(text='üí°–§–∏–∑–∏–∫–∞', callback_data='14')
item_16 = types.InlineKeyboardButton(text='‚öΩÔ∏è–§–∏–∑ - —Ä–∞', callback_data='15')
item_17 = types.InlineKeyboardButton(text='üß™–•–∏–º–∏—è', callback_data='16')
m.add(item_1, item_2, item_3, item_4, item_5, item_6, item_7, item_8, item_9, item_10,
      item_11, item_12, item_13, item_14, item_15, item_16, item_17)
keyboard_edu = telebot.types.ReplyKeyboardMarkup(True)
keyboard_edu.row("–¢–∞–±–µ–ª—å")
keyboard_edu.row("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
keyboard_edu.row("–ù–∞–∑–∞–¥")

murkup = types.ReplyKeyboardMarkup(True, row_width=3)
item_1 = types.KeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å –î/–ó')
item_2 = types.KeyboardButton('–ß—Ç–æ –∑–∞–¥–∞–ª–∏')
item_3 = types.InlineKeyboardButton('–°—Ç–æ–ª–æ–≤–∞—è')
item_4 = types.InlineKeyboardButton('–¢–∞–±–µ–ª—å —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏')
murkup.add(item_1, item_2, item_3, item_4)


@bot.message_handler(commands=['start', 'help'])
def start(message):
    if message.text == '/start':
        laste_name = message.from_user.last_name
        if not laste_name:
            laste_name = ''
        bot.send_message(message.chat.id,
                         '–ü—Ä–∏–≤–µ—Ç, ' + message.from_user.first_name + ' ' + laste_name +
                         '\n\n–ü—Ä–æ–ø–∏—à–∏ /help, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ', reply_markup=murkup)
    elif message.text == '/help':
        bot.send_message(message.chat.id, '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –≤—ã–∫—Ä—É—á–∏–≤–∞–π—Å—è —Å–∞–º'
                                          '\n–ö–∞–∫ –≤–∞—Ä–∏–∞–Ω—Ç, –∂–º–∏ –Ω–∞ –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ä—è–¥)')


def get_dz(message):
    try:
        test.click_hm(message, bot, keyboard_edu)
    except:
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —É–∫–∞–∑–∞–Ω—ã–π –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å',
                         reply_markup=keyboard_edu)
    bot.register_next_step_handler(message, edu_tatar)


def edu_tatar(message):
    text = message.text
    if text == '–ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ', reply_markup=murkup)
        bot.register_next_step_handler(message, text)
    elif text == '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª', reply_markup=keyboard_edu)
        bot.register_next_step_handler(message, edu_tatar)
    elif text == '–¢–∞–±–µ–ª—å':
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ', reply_markup=keyboard_edu)
        bot.register_next_step_handler(message, edu_tatar)


@bot.message_handler(content_types=['text'])
def text(message):
    global message_lesson
    global message_food
    global stolovka_food
    global lessons
    global people

    if message.from_user.id == people:
        people = message.text
        if str(people).isdigit() and int(people) > 0:
            bot.send_message(message.chat.id, '‚ôªÔ∏è–ß–∏—Å–ª–æ –ª—é–¥–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–æ‚ôª')
        else:
            people = message.from_user.id
            bot.send_message(message.chat.id, '‚ùå–í—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ‚ùå\n‚¨áÔ∏è–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –Ω–∏–∂–µ‚¨áÔ∏è')
            bot.register_next_step_handler(message, text)
    elif message.text == '–ó–∞–ø–∏—Å–∞—Ç—å –î/–ó':
        bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–∞–πÔ∏è', reply_markup=m)
    elif message.text == '–¢–∞–±–µ–ª—å —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏':
        bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–∞–πÔ∏è', reply_markup=keyboard_edu)
        bot.register_next_step_handler(message, edu_tatar)
    elif message.text == '–ß—Ç–æ –∑–∞–¥–∞–ª–∏':  # –í—ã–±–æ—Ä –¥–Ω—è
        murkup = types.InlineKeyboardMarkup(row_width=2)
        item_1 = types.InlineKeyboardButton('1Ô∏è‚É£–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', callback_data='day_–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫_0')
        item_2 = types.InlineKeyboardButton('2Ô∏è‚É£–í—Ç–æ—Ä–Ω–∏–∫', callback_data='day_–≤—Ç–æ—Ä–Ω–∏–∫_1')
        item_3 = types.InlineKeyboardButton('3Ô∏è‚É£–°—Ä–µ–¥–∞', callback_data='day_—Å—Ä–µ–¥–∞_2')
        item_4 = types.InlineKeyboardButton('4Ô∏è‚É£–ß–µ—Ç–≤–µ—Ä–≥', callback_data='day_—á–µ—Ç–≤–µ—Ä–≥_3')
        item_5 = types.InlineKeyboardButton('5Ô∏è‚É£–ü—è—Ç–Ω–∏—Ü–∞', callback_data='day_–ø—è—Ç–Ω–∏—Ü–∞_4')
        item_6 = types.InlineKeyboardButton('6Ô∏è‚É£–°—É–±–±–æ—Ç–∞', callback_data='day_—Å—É–±–±–æ—Ç–∞_5')
        item_7 = types.InlineKeyboardButton('‚¨áÔ∏è–í—Å—è –¥–æ–º–∞—à–∫–∞‚¨áÔ∏èÔ∏è', callback_data='day_/_all')
        murkup.add(item_1, item_2, item_3, item_4, item_5, item_6, item_7)
        bot.send_message(message.chat.id, '–ö–∞–∫–æ–π –¥–µ–Ω—å', reply_markup=murkup)
    elif message.text == '–°—Ç–æ–ª–æ–≤–∞—è':  # —Å—Ç–æ–ª–æ–≤–∞—è
        if people:
            if message.from_user.id == people:
                bot.send_message(message.chat.id, '‚ùå–í—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ‚ùå\n–î–∞–≤–∞–π—Ç–µ –∑–∞–Ω–æ–≥–æ')
            else:
                choice = types.InlineKeyboardMarkup()
                item_1 = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å' + stolovka_food,
                                                    callback_data='stolovka_write')
                item_2 = types.InlineKeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è' + stolovka_all,
                                                    callback_data='stolovka_add')
                item_3 = types.InlineKeyboardButton('–û—Ç–º–µ—Ç–∏—Ç—å' + stolovka_who,
                                                    callback_data='stolovka_who')
                choice.add(item_1, item_2, item_3)
                bot.send_message(message.chat.id, "–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",reply_markup=choice)
                message_food_id.append(message.from_user.id)
        else:
            bot.send_message(message.chat.id, '–°–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π –≤ –∫–ª–∞—Å—Å–µ?\n‚¨á–ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –Ω–∏–∂–µ‚¨á')
            people = message.from_user.id
    elif message.from_user.id in message_lesson_id:  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–∞—à–∫–∏
        i = message_lesson_id.index(message.from_user.id)
        LESSONS[message_lesson.pop(i)] = message.text
        del message_lesson_id[i]
        bot.send_message(message.chat.id, '‚ôªÔ∏è–î–æ–º–∞—à–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞‚ôªÔ∏è')
        lessons = open('lessons', 'wb')
        pickle.dump(LESSONS, lessons)
        lessons.close()
    elif message.from_user.id in message_food_id:
        del message_food_id[message_food_id.index(message.from_user.id)]
        global FOOD
        stolovka_food = '‚úÖ'
        FOOD[message.text] = [0, 0]
        bot.send_message(message.chat.id, '‚ôªÔ∏è–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ‚ôªÔ∏è')


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    global FOOD
    global stolovka_food
    global stolovka_who
    global stolovka_all
    global people
    global message_food_id
    global food_who_id

    if call.data == '-':
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text='–í—ã –≤—ã–±—Ä–∞–ª–∏:  ' + \
                                   call.message.text[
                                   call.message.text.find(':') + 2: call.message.text.find(
                                       '\n')] + '\n‚¨áÔ∏è–ù–∞–ø–∏—à–∏—Ç–µ –¥–æ–º–∞—à–∫—É –Ω–∏–∂–µ‚¨áÔ∏è')
        message_lesson_id.append(call.from_user.id)
        message_lesson.append(
            call.message.text[call.message.text.find(':') + 3: call.message.text.find('\n')])
    elif call.data == '+':
        bot.delete_message(call.message.chat.id, call.message.json['message_id'])
        bot.send_message(call.message.chat.id, '–í—ã–±–∏—Ä–∞–πÔ∏è', reply_markup=m)
    elif call.data[:3] == 'day':  # –í—ã–≤–æ–¥ –¥–æ–º–∞—à–∫–∏
        if call.data.split('_')[2] == 'all':
            pass
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text='–í—ã –≤—ã–±—Ä–∞–ª–∏\n' +
                                   call.message.json['reply_markup']['inline_keyboard'][
                                       int(call.data.split('_')[2]) // 2][
                                       int(call.data.split('_')[2]) - \
                                       int(call.data.split('_')[2]) // 2 * 2]['text'])
        print_ = []
        for lesson in DIARY.DIARY[int(call.data.split('_')[2])]:
            print_.append(lesson + ':  ' + LESSONS.get(lesson, '–î–æ–º–∞—à–∫–∏ –Ω–µ—Ç'))
        bot.send_message(call.message.chat.id, '\n\n'.join(print_))
    elif call.data.split('_')[0] == 'stolovka':
        if FOOD:
            if call.data.split('_')[1] == 'add':
                if FOOD[''.join(list(FOOD.keys())[0])][0] + FOOD[''.join(list(FOOD.keys())[0])][1] < int(people):
                    murkup = types.InlineKeyboardMarkup()
                    item_1 = types.InlineKeyboardButton('‚úÖ' + str(list(FOOD.values())[0][0]),
                                                        callback_data='stolovka_+')
                    item_2 = types.InlineKeyboardButton('‚ùå' + str(list(FOOD.values())[0][1]),
                                                        callback_data='stolovka_-')
                    murkup.add(item_1, item_2)
                    bot.send_message(call.message.chat.id, list(FOOD.keys())[0] + '\n–¢—ã –∫–∞–∫?)',
                                     reply_markup=murkup)
                else:
                    bot.send_message(call.message.chat.id, '‚ôªÔ∏è–í—Å–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å‚ôªÔ∏è')
            elif call.data.split('_')[1] == 'who':
                bot.send_message(call.message.chat.id,
                                 '–ü–æ–ª—É—á–∏–ª–æ—Å—å ' + str(list(FOOD.values())[0][0]) + ' + ' + str(
                                     list(FOOD.values())[0][1]))
                people = 0
                FOOD = {}
                stolovka_food = '‚ùå'
                stolovka_who = '‚ùå'
                stolovka_all = '‚ùå'
                message_food_id = []
                food_who_id = set()
            elif call.data.split('_')[1] == '+':
                if call.from_user.id not in food_who_id:
                    food_who_id.add(call.from_user.id)
                    FOOD[''.join(list(FOOD.keys())[0])][0] += 1
                    bot.send_message(call.message.chat.id, '‚ôªÔ∏è–ú—ã –≤–∞—Å –æ—Ç–º–µ—Ç–∏–ª–∏‚ôªÔ∏è')
                else:
                    bot.send_message(call.message.chat.id, '‚ôªÔ∏è–í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å‚ôªÔ∏è')
            elif call.data.split('_')[1] == '-':
                if call.from_user.id not in food_who_id:
                    food_who_id.add(call.from_user.id)
                    FOOD[''.join(list(FOOD.keys())[0])][1] += 1
                    bot.send_message(call.message.chat.id, '‚ôªÔ∏è–ú—ã –≤–∞—Å –æ—Ç–º–µ—Ç–∏–ª–∏‚ôªÔ∏è')
                else:
                    bot.send_message(call.message.chat.id, '‚ôªÔ∏è–í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å‚ôªÔ∏è')
            if FOOD:
                if FOOD[''.join(list(FOOD.keys())[0])][0] + FOOD[''.join(list(FOOD.keys())[0])][1] == int(people):
                    stolovka_all = '‚úÖ'
                    stolovka_who = '‚úÖ'
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

        else:
            if call.data.split('_')[1] == 'write':
                global message_food
                bot.send_message(call.message.chat.id, '‚¨áÔ∏è–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –¥–∞—é—Ç –Ω–∏–∂–µ‚¨áÔ∏è')
                bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
                message_food = True
            else:
                bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
                bot.send_message(call.message.chat.id, '–ß—Ç–æ –¥–∞—é—Ç –µ—â–µ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª–∏')
    else:
        hod = types.InlineKeyboardMarkup(row_width=2)
        item_1 = types.InlineKeyboardButton('–î–∞', callback_data='+')
        item_2 = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='-')
        hod.add(item_1, item_2)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text='–í—ã –≤—ã–±—Ä–∞–ª–∏:  ' \
                                   + call.message.json['reply_markup']['inline_keyboard'
                                   ][int(call.data) // 3][int(call.data) - int(call.data) // 3 * 3][
                                       'text'] + '\n–°–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥–æ–π –≤—ã–±–æ—Ä?', reply_markup=hod)


while True:
    bot.polling(none_stop=True)
